#!usr/bin/env python
import random
import string

import requests, re, urllib.parse
from bs4 import BeautifulSoup

import scanner


class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.ignore_links = ignore_links
        self.output = []

    def extract_links(self, url):
        response = self.session.get(url)
        content_str = response.content.decode('utf-8')
        return re.findall('(?:href=")(.*?)"', content_str)

    def crawl(self, url=None):
        # print("test string!")
        if url == None:
            url = self.target_url
        href_links = self.extract_links(url)
        for link in href_links:
            link = urllib.parse.urljoin(url, link)
            if "#" in link:
                link = link.split("#")[0]
            if self.target_url in link and link not in self.target_links and link not in self.ignore_links:
                self.target_links.append(link)
                print(link)
                self.crawl(link)
        return self.target_links
    def p(self):
        print(self.target_links)

    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features="lxml")
        return parsed_html.findAll("form")

    def submit_forms(self, form, value, url, username=None, password=None):
        action = form.get("action")
        post_url = urllib.parse.urljoin(url, action)
        method = form.get("method")
        inputs_list = form.findAll("input")
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            if input_type == "text":
                input_value = value
            elif input_type == "username":
                input_value = username
            elif input_type == "password":
                input_value = password
            else:
                input_value = "value"
            post_data[input_name] = input_value
        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def output_result(self, message):
        self.output.append(message)
        print(message)
    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                self.output_result(f"[+]Testing Form in {link} for xss vulnerability")
                #print("[+]Testing Form in " + link + "for xss vulnerability")
                self.output.append("[+]Testing Form in " + link + "for xss vulnerability")
                vuln_to_xss = self.xss_scanner_forms(form, link)
                if vuln_to_xss:
                    self.output_result(f"\n\n[*****]XSS DISCOVERED IN {link} in the form: ")
                    self.output_result(str(form))


            if "=" in link:
                self.output_result(f"[+]Testing {link}")
                # print("[+]Testing " + link)
                #self.output.append("[+]Testing " + link)
                vuln_to_xss = self.xss_scanner_link(link)
                if vuln_to_xss:
                    self.output_result(f"\n\n[*****]XSS DISCOVERED IN {link}")


    def sqli_scanner(self):
        # sqli_test_script_list = ['or 1=1','or 1=1--','or 1=1#','or 1=1/*',"admin' --","admin' #","admin'/*","admin' or '1'='1","admin' or '1'='1'--"]
        # for sqli_test_script in sqli_test_script_list:
        sqli_test_script = "'or 1=1"
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                self.output_result(f"[/]Testing form in {link} for sql vulnerability")
                # print("[/]Testing form in " + link + "for sql vulnerability")
                # self.output.append("[/]Testing form in " + link + "for sql vulnerability")
                response = self.submit_forms(form, sqli_test_script, link)

                content_str = response.content.decode('utf-8')

                if "You have an error in your SQL syntax" in content_str:
                    self.output_result(f"[*****]SQLi DISCOVERED IN {link} in the form: ")
                    self.output_result(str(form))

                    # print("[*****]SQLi DISCOVERED IN " + link + " in the form: ")
                    # self.output.append("[*****]SQLi DISCOVERED IN " + link + " in the form: ")
                    # print(form)
                    # self.output.append(str(form))

    def xss_scanner_link(self, link):
        if "=" in link:
            print(f"[+] Testing {link} for XSS vulnerability")
            self.output.append(f"[+] Testing {link} for XSS vulnerability")
            xss_test_script = "<script>alert(1)</script>"
            url = link.replace("=", f"={xss_test_script}")
            response = self.session.get(url)
            if xss_test_script.encode('utf-8') in response.content:
                print(f"[*****] XSS vulnerability discovered in {link}")
                self.output.append(f"[*****] XSS vulnerability discovered in {link}")
                return True
        return False

    def xss_scanner_forms(self, form, url):
        xss_test_script = "<sCript>alert('XSS')</scriPt>"
        response = self.submit_forms(form, xss_test_script, url)
        content_str = response.content.decode('utf-8')
        if xss_test_script in content_str:
            return True

    def form_bypass_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print(f"[+] Testing form in {link} for form bypass vulnerability")
                self.output.append(f"[+] Testing form in {link} for form bypass vulnerability")
                random_value = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
                response = self.submit_forms(form, random_value, link)
                if random_value in response.content.decode('utf-8'):
                    print(f"[*****] Form bypass vulnerability discovered in {link}")
                    self.output.append(f"[*****] Form bypass vulnerability discovered in {link}")

    def csrf_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print(f"[+] Testing form in {link} for CSRF vulnerability")
                self.output.append(f"[+] Testing form in {link} for CSRF vulnerability")
                csrf_token = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
                form_data = self.submit_forms(form, csrf_token, link).text
                if csrf_token not in form_data:
                    print(f"[*****] CSRF vulnerability discovered in {link}")
                    self.output.append(f"[*****] CSRF vulnerability discovered in {link}")

    def file_inclusion_scanner(self):
        for link in self.target_links:
            if "=" in link:
                print(f"[+] Testing {link} for file inclusion vulnerability")
                self.output.append(f"[+] Testing {link} for file inclusion vulnerability")
                file_paths = ['file6.php']
                for file_path in file_paths:
                    parts = link.split("=", 1)  # Split the link at the first occurrence of "="
                    url = parts[0] + "=" + file_path
                    response = self.session.get(url)
                    #print(response.content.decode('utf-8'))
                    #print(response.text)
                    if ('file5' in response.content.decode('utf-8') or '[boot loader]' in response.content.decode('utf-8')
                            or '[here]' in response.content.decode('utf-8') or '[file5.php]' in response.content.decode('utf-8')):
                        print(f"[*****] File inclusion vulnerability discovered in {link}")
                        self.output.append(f"[*****] File inclusion vulnerability discovered in {link}")
                        break

    def brute_force_scanner(self):
        # 账号表
        account_dict = [
            {'username': 'admin', 'password': '123456'},
            {'username': 'test', 'password': 'abc123'},
            {'username': 'user', 'password': 'password'}
        ]

        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                self.output_result(f"[+] Testing form in {link} for brute force vulnerability")
                # print(f"[+] Testing form in {link} for brute force vulnerability")
                # self.output.append(f"[+] Testing form in {link} for brute force vulnerability")
                brute_force_scanner = BruteForceScanner(link, [account['username'] for account in account_dict], [account['password'] for account in account_dict])
                self.output.extend(brute_force_scanner.brute_force_login())

class BruteForceScanner:
    def __init__(self, target_url, usernames, passwords):
        self.target_url = target_url
        self.usernames = usernames
        self.passwords = passwords
        self.output1 = []

    def brute_force_login(self):
        for username in self.usernames:
            for password in self.passwords:
                data = {
                    'username': username,
                    'password': password,
                    'submit': 'Login'
                }
                response = requests.post(self.target_url, data=data)
                if 'login success' in response.text:
                    message = f'[*****] Brute force vulnerability discovered in {self.target_url} with username: {username}, password: {password}'
                    self.output1.append(message)

                return self.output1
                    # self.output1.append(message)
                    # self.output1.append("just for testing")
                    #print("just for testing")
                    # message = f'[*****] Brute force vulnerability discovered in {self.target_url} with username: {username}, password: {password}'
                    #print(message)
                    # self.output.append(message)

                    # print(f'[*****] Brute force vulnerability discovered in {self.target_url} with username: {username}, password: {password}')
                    # self.output.append(f'[*****] Brute force vulnerability discovered in {self.target_url} with username: {username}, password: {password}')



